/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'buls' at '6/23/16 12:36 AM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */


buildscript {
    repositories {
        mavenCentral()
        jcenter()

    }

}

plugins {
    id "org.flywaydb.flyway" version "6.2.1"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'

group = "com.pencom.enrol"
version = "0.1.1"
description = "Geolocation Application"

def moduleName = "${rootProject.name}"
def projectName = "geolocator"
def archivePath = "${project.buildDir}${File.separator}libs${File.separator}${moduleName}-${version}.war"
def glassfishHome = "${glassfishHome}${File.separator}bin"
def deployedAppDir = "${deploymentDir}${File.separator}${moduleName}"
def deployedClassesDir = "${deployedAppDir}${File.separator}WEB-INF${File.separator}classes"
def buildClassesDir = "${project.buildDir}${File.separator}classes${File.separator}main"
def warDir = "${rootDir}${File.separator}war"
def warClassesDir = "${warDir}${File.separator}WEB-INF${File.separator}classes"
def cssDir = "${rootDir}${File.separator}src${File.separator}main${File.separator}webapp${File.separator}css"
def deployedCssDir = "${deployedAppDir}${File.separator}css"
def appContext = "geolocator"
def configDir = "${projectDir}${File.separator}src${File.separator}main${File.separator}resources${File.separator}config"


repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://repo1.maven.org/maven2"
    }
    maven {
        url 'https://jasperreports.sourceforge.net/maven2'
    }
    maven {
        url 'http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/'
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile group: "com.sendgrid", name: "sendgrid-java", version: "4.0.1"
    compile group: "javax", name: "javaee-api", version: "7.0"
    compile group: "org.eclipse.persistence", name: "javax.persistence", version: "2.1.0"
    compile group: "org.eclipse.persistence", name: "eclipselink", version: "2.6.0"
    compile group: 'com.google.code.gson', name: 'gson', version: '2.2.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.4.1.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.4.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.4.1.1'
    compile group: 'com.google.maps', name: 'google-maps-services', version: '0.15.4'

    testCompile 'junit:junit:4.12'
}

def isWindows() {
    return System.properties['os.name'].toLowerCase().contains('windows')
}

def asadmin() {
    if (isWindows()) {
        return ['cmd', '/c', 'asadmin.bat']
    } else {
        return './asadmin'
    }
}

def touch() {
    if (isWindows()) {
        return ['copy', '/b']
    } else {
        return 'touch'
    }
}

task deploy(dependsOn: "war", type: Exec) {
    workingDir glassfishHome
    commandLine asadmin()
    args "deploy", "--force=true", "--name=${moduleName}", "${archivePath}"
}

task undeploy(type: Exec) {
    workingDir glassfishHome
    commandLine asadmin()
    args "undeploy", "${moduleName}"
}

task redeployApp(dependsOn: "copyForReload", type: Exec) {
    workingDir glassfishHome
    commandLine asadmin()
    args "redeploy", "--keepstate=true", "--name=${moduleName}", "${archivePath}"
}

task redeploy {
    dependsOn "redeployApp"
}

task reloadClasses(dependsOn: "compileJava", type: Copy) {
    from file("${buildClassesDir}")
    into file("${deployedClassesDir}")
}

task reloadCss(type: Copy) {
    from file("${cssDir}")
    into file("${deployedCssDir}")
}

task reloadClient(dependsOn: "copyForReload", type: Exec) {
    workingDir deployedAppDir
    commandLine touch()
    if (isWindows()) {
        args "${deployedAppDir}${File.separator}.reload", "+,,"
    } else {
        args "${deployedAppDir}${File.separator}.reload"
    }
}

task copyForReload(dependsOn: "war", type: Copy) {
    from zipTree(file("${archivePath}"))
    into file("${deployedAppDir}")
}


task reload {
    dependsOn "reloadClient"
}






